# x-release-please-version v0.2.2
---
name: Get GitHub App Token

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      runs-on:
        description: Additional required tags for the pipeline agents to use.
        required: true
        type: string
        default: '["ubuntu-latest"]'
      client-id:
        description: 'GitHub App Client ID'
        required: true
        type: string
        default: "Iv23lihLWbuwsOyIo6Hb"
      installation-id:
        description: 'GitHub App Installation ID'
        required: true
        type: string
        default: '54341769'

  workflow_call:
    inputs:
      runs-on:
        description: Additional required tags for the pipeline agents to use.
        required: false
        type: string
        default: '["ubuntu-latest"]'
      client-id:
        description: 'GitHub App Client ID'
        required: true
        type: string
        default: "31"
      installation-id:
        description: 'GitHub App Installation ID'
        required: true
        type: string
        default: '92'
    outputs:
      encrypted-token:
        description: 'GitHub App Token (Encrypted)'
        value: ${{ jobs.get-token.outputs.token }}

jobs:
  get-token:
    name: 'Get GitHub App Token'
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    outputs:
      token: ${{ steps.encrypt-token.outputs.out }}
    steps:
      # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app
      - name: "Obtain GitHub App Installation Access Token"
        id: githubAppAuth
        run: |
          set -o pipefail

          client_id=${{ inputs.client-id || 31 }} # Client ID as first argument

          echo "${{ secrets.GOV_APP_PVT_KEY }}" > /tmp/submodules-app-private-key.pem
          pem=$( cat /tmp/submodules-app-private-key.pem ) # file path of the private key as second argument

          now=$(date +%s)
          iat=$((${now} - 60)) # Issues 60 seconds in the past
          exp=$((iat + 600)) # Expires 10 minutes in the future (this is upper limit for GitHub App token)

          b64enc() { openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }

          header_json='{
              "typ":"JWT",
              "alg":"RS256"
          }'

          # Header encode
          header=$( echo -n "${header_json}" | b64enc )

          payload_json='{
              "iat":'"${iat}"',
              "exp":'"${exp}"',
              "iss":'"${client_id}"'
          }'
          # Payload encode
          echo "payload=$payload_json"
          payload=$( echo -n "${payload_json}" | b64enc )

          # Signature
          header_payload="${header}"."${payload}"
          signature=$(
              openssl dgst -sha256 -sign <(echo -n "${pem}") \
              <(echo -n "${header_payload}") | b64enc
          )

          # Create JWT
          JWT="${header_payload}"."${signature}"
          printf '%s\n' "JWT: $JWT"

          response=$(curl -s --request POST \
            --url "${{ github.api_url }}/app/installations/${{ inputs.installation-id || 92 }}/access_tokens" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer ${JWT}" \
            --header "X-GitHub-Api-Version: 2022-11-28")
          http_code=$(echo "$response" | awk '{print $1}')

          echo "HTTP Code: $http_code"

          token=$(echo "$response" | jq -r '.token')
          echo "token=$token" >> $GITHUB_OUTPUT

      - name: Encrypt Token
        uses: cloudposse/github-action-secret-outputs@0.1.2
        id: encrypt-token
        with:
          ## PASSWORD is a gpg passphrase stored in Github Secrets.
          secret: ${{ secrets.GOV_APP_PASSWORD }}
          op: encode
          in: ${{ steps.githubAppAuth.outputs.token }}

  verify-token:
    name: 'Verify token'
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    if:  ${{ github.event_name == 'workflow_dispatch' }}
    needs: get-token
    steps:
      - name: Decrypt Token
        uses: cloudposse/github-action-secret-outputs@0.1.2
        id: decrypt-token
        with:
          ## PASSWORD is a gpg passphrase stored in Github Secrets.
          secret: ${{ secrets.GOV_APP_PASSWORD }}
          op: decode
          in: ${{ needs.get-token.outputs.token }}

      - name: Print token to console
        id: verify-token
        run: |
          echo ${{ steps.decrypt-token.outputs.out }}
