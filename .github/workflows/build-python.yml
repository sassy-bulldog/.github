name: 'Build Python'

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      runs-on:
        description: Additional required tags for the pipeline agents to use.
        required: true
        type: string
      working-directory:
        description: 'Directory to use for storing the artifacts and running the build'
        type: string
        required: false
        default: ./
      python-version:
        description: Python version to use for building
        required: false
        type: string
        default: '3.11'
      version:
        description: Semantic version of current build
        type: string
        required: false
        default: 0.0.1-alpha
      artifact-name:
        description: Name of the artifact to upload to the calling workflow
        type: string
        required: true
      build-backend:
        description: Build backend to use (setuptools, poetry, or flit)
        type: string
        required: false
        default: 'setuptools'

jobs:
  build:
    name: Build Python package
    runs-on: ${{ fromJSON(inputs.runs-on) }}

    steps:
      - name: Clean Agent Workspace
        uses: tiacsys/clean-after-action@v3.0.0

      - name: Checkout Repo
        uses: actions/checkout@v5.0.0

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          if [ "${{ inputs.build-backend }}" = "poetry" ]; then
            pip install poetry
          elif [ "${{ inputs.build-backend }}" = "flit" ]; then
            pip install flit
          else
            pip install build setuptools wheel
          fi
        working-directory: "${{ inputs.working-directory }}"

      - name: Update version (setuptools)
        if: inputs.build-backend == 'setuptools'
        run: |
          if [ -f setup.py ]; then
            sed -i "s/version=.*/version='${{ inputs.version }}',/" setup.py
          fi
          if [ -f setup.cfg ]; then
            sed -i "s/version = .*/version = ${{ inputs.version }}/" setup.cfg
          fi
          if [ -f pyproject.toml ]; then
            sed -i 's/version = .*/version = "${{ inputs.version }}"/' pyproject.toml
          fi
        working-directory: "${{ inputs.working-directory }}"

      - name: Update version (poetry)
        if: inputs.build-backend == 'poetry'
        run: poetry version ${{ inputs.version }}
        working-directory: "${{ inputs.working-directory }}"

      - name: Update version (flit)
        if: inputs.build-backend == 'flit'
        run: |
          if [ -f pyproject.toml ]; then
            sed -i 's/version = .*/version = "${{ inputs.version }}"/' pyproject.toml
          fi
        working-directory: "${{ inputs.working-directory }}"

      - name: Build package (setuptools)
        if: inputs.build-backend == 'setuptools'
        run: python -m build
        working-directory: "${{ inputs.working-directory }}"

      - name: Build package (poetry)
        if: inputs.build-backend == 'poetry'
        run: poetry build
        working-directory: "${{ inputs.working-directory }}"

      - name: Build package (flit)
        if: inputs.build-backend == 'flit'
        run: flit build
        working-directory: "${{ inputs.working-directory }}"

      - name: Prepare artifacts
        run: |
          mkdir -p dist-final
          cp dist/* dist-final/ 2>/dev/null || true
          # Also create a source distribution if not already created
          if ! ls dist/*.tar.gz 1> /dev/null 2>&1 && [ "${{ inputs.build-backend }}" = "setuptools" ]; then
            python -m build --sdist --outdir dist-final/
          fi
        working-directory: "${{ inputs.working-directory }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.working-directory }}/dist-final/*
          retention-days: 5

  createBug:
    name: Create Bug
    needs: [build]
    if: failure()
    uses: ./.github/workflows/create-bug.yml
    with:
      runs-on: ${{ fromJSON(inputs.runs-on) }}
      title: 'Python Build Failed'
      job: 'build'
      status: 'failure'
