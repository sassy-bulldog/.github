---
name: Release

permissions:
  contents: read

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      - 'releases/**'
      - 'main'
      - 'rc/*'
      - 'rc'
      - 'beta/*'
      - 'beta'
      - 'alpha/*'
      - 'alpha'

  workflow_dispatch:
    inputs:
      runs-on:
        description: Additional required tags for the pipeline agents to use.
        required: true
        type: string
      dry_run:
        description: 'When set to true it does not actually publish the version, but rather writes the info for the release to the agent output'
        required: false
        type: boolean
        default: true

  workflow_call:
    inputs:
      runs-on:
        description: Additional required tags for the pipeline agents to use.
        required: false
        type: string
        default: '["ubuntu-latest"]'
      dry_run:
        description: 'When set to true it does not actually publish the version, but rather writes the info for the release to the agent output'
        required: false
        type: boolean
        default: true

    # TODO: Does release-please have all these outputs?
    outputs:
      new_release_published:
        description: Whether a new release was published. The return value is in the form of a string. ("true" or "false")
        value: ${{ jobs.release.outputs.new_release_published }}
      new_release_git_tag:
        description: The Git tag associated with the new release.
        value: ${{ jobs.release.outputs.new_release_git_tag }}
      new_release_version:
        description: Version of the new release. (e.g. `1.3.0`)
        value: ${{ jobs.release.outputs.new_release_version }}
      new_release_major_version:
        description: Major version of the new release. (e.g. "1")
        value: ${{ jobs.release.outputs.new_release_major_version }}
      new_release_minor_version:
        description: Minor version of the new release. (e.g. "3")
        value: ${{ jobs.release.outputs.new_release_minor_version }}
      new_release_patch_version:
        description: Patch version of the new release. (e.g. "0")
        value: ${{ jobs.release.outputs.new_release_patch_version }}
      new_release_channel:
        description: The distribution channel on which the last release was initially made available (undefined for the default distribution channel).
        value: ${{ jobs.release.outputs.new_release_channel }}
      new_release_notes:
        description: The release notes for the new release.
        value: ${{ jobs.release.outputs.new_release_notes }}
      new_release_git_head:
        description: The sha of the last commit being part of the new release
        value: ${{ jobs.release.outputs.new_release_git_head }}
      last_release_git_tag:
        description: The Git tag associated with the last release, if there was one.
        value: ${{ jobs.release.outputs.last_release_git_tag }}
      last_release_version:
        description: Version of the previous release, if there was one. (e.g. 1.2.0)
        value: ${{ jobs.release.outputs.last_release_version }}
      last_release_git_head:
        description: The sha of the last commit being part of the last release, if there was one.
        value: ${{ jobs.release.outputs.last_release_git_head }}

jobs:
  get-app-token:
    name: Get GitHub App Token
    uses: ./.github/workflows/get-app-token.yml
    with:
      runs-on: ${{ inputs.runs-on || '[ "ubuntu-latest" ]' }}
      client-id: ${{ vars.GOV_APP_CLIENT_ID }}
      installation-id: ${{ vars.GOV_APP_INSTALLATION_ID }}
    secrets: inherit

  release:
    name: 'Create Release PR ðŸš€'
    needs: get-app-token
    runs-on: ${{ fromJSON(inputs.runs-on || '["ubuntu-latest"]') }}
    steps:
      #TODO: Deprecated NodeJS Version
      - name: Clean Agent Workspace
        uses: tiacsys/clean-after-action@v3.0.0

      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Decrypt Token
        uses: cloudposse/github-action-secret-outputs@0.1.2
        id: decrypt-token
        with:
          ## PASSWORD is a gpg passphrase stored in Github Secrets.
          secret: ${{ secrets.GOV_APP_PASSWORD }}
          op: decode
          in: ${{ needs.get-app-token.outputs.encrypted-token }}

      - name: Release Please ðŸŽ‰
        uses: googleapis/release-please-action@v4.2.0
        with:
          token: ${{ steps.decrypt-token.outputs.out || github.token }}
          config-file: .github/.release-please-config.json
          manifest-file: .github/.release-please-manifest.json
