name: Create an Issue documenting the bug

permissions:
  contents: read

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      runs-on:
        description: Additional required tags for the pipeline agents to use.
        required: false
        type: string
        default: '[ "ubuntu-latest" ]'
      title:
        description: Title of the issue to create
        required: true
        type: string
      job:
        description: Job name that failed
        required: true
        type: string
      status:
        description: Status of the preceeding job
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get-app-token:
    name: Get GitHub App Token
    uses: ./.github/workflows/get-app-token.yml
    with:
      runs-on: ${{ inputs.runs-on }}
      client-id: ${{ vars.GOV_APP_CLIENT_ID }}
      installation-id: ${{ vars.GOV_APP_INSTALLATION_ID }}
    secrets: inherit

  create-bug:
    needs: get-app-token
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
      #TODO: Deprecated NodeJS Version
      - name: Clean Agent Workspace
        uses: tiacsys/clean-after-action@v3.0.0

      - name: Decrypt Token
        uses: cloudposse/github-action-secret-outputs@0.1.2
        id: decrypt-token
        with:
          ## PASSWORD is a gpg passphrase stored in Github Secrets.
          secret: ${{ secrets.GOV_APP_PASSWORD }}
          op: decode
          in: ${{ needs.get-app-token.outputs.encrypted-token }}

      - name: Create bug if failed
        if: inputs.status == 'failure'
        uses: dacbd/create-issue-action@v2.0.0
        with:
          token: ${{ steps.decrypt-token.outputs.out }}
          title: 'BUG: ${{ inputs.title }}'
          body: |
            ### Context
            [Failed Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Codebase](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.sha }})
            Workflow name - `${{ github.workflow }}`
            Job -           `${{ inputs.job }}`
            status -        `${{ inputs.status }}`
          assignees: ${{ github.triggering_actor }}
